#version: '3.8'
############################
##  DEFAULT
############################
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.3}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0 
    AIRFLOW__CELERY__RESULT_BACKEND: redis://redis:6379/0
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@db/admin
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@db/admin
    AIRFLOW__CORE__MINIO_ENDPOINT: http://minio:9000
    AIRFLOW__CORE__MINIO_ACCESS_KEY: flashbus
    AIRFLOW__CORE__MINIO_SECRET_KEY: flashbus
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
    - ./util:/util
  user: "${AIRFLOW_UID:-50000}:0"

services:
############################
##  DATA LAKE
############################
  minio:
    image: minio/minio:latest
    platform: linux/amd64
    container_name: minio
    entrypoint: sh
    command: '-c ''mkdir -p /minio_data/raw && mkdir -p /minio_data/trusted && mkdir -p /minio_data/refined && minio server /minio_data --console-address ":9001"'''
    ports:
      - "9050:9000"
      - "9051:9001"
    hostname: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: flashbus
      MINIO_SECRET_KEY: flashbus
    volumes:
      - ./minio/data1:/data

############################
## INGESTAO
############################
  nifi:
    image: apache/nifi:latest
    platform: linux/amd64
    build:
      context: .                # Diretório atual como contexto de build
      dockerfile: nifi/Dockerfile  # Caminho para o Dockerfile
    container_name: nifi
    hostname: nifi
    volumes:
      - ./nifi/util:/util
      # - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
      # - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      # - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
      # - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      # - ./nifi/state:/opt/nifi/nifi-current/state
      # - ./nifi/conf:/opt/nifi/nifi-current/conf
      # - ./util:/util
    environment:
      NIFI_WEB_HTTP_PORT: "9090"
      NIFI_WEB_HTTPS_HOST: "nifi"
      TZ: "America/Sao_Paulo"
      #PYSPARK_PYTHON: "/usr/bin/python3.10"
      #PYSPARK_DRIVER_PYTHON: "/usr/bin/python3.10"
    command: >
      sh -c "ln -snf /usr/share/zoneinfo/$$TZ /etc/localtime && echo $$TZ > /etc/timezone"
      
    ports:
      - 49090:9090
    deploy:
      resources:
        limits:
          memory: 2g
          # cpus: '0.2'

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    platform: linux/amd64
    hostname: airflow-webserver
    build:
      context: .
      dockerfile: airflow/Dockerfile
    ports:
      - "58080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      - db
      - airflow-scheduler
      - airflow-worker  # Comentar se não necessário
    command: >
      bash -c "airflow db init && \
      airflow users create --username admin --firstname Firstname --lastname Lastname --role Admin --email admin@example.com --password admin || true && \
      airflow webserver"

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    platform: linux/amd64
    hostname: airflow-scheduler
    build:
      context: .
      dockerfile: airflow/Dockerfile
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - db

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    platform: linux/amd64
    hostname: airflow-worker
    build:
      context: .
      dockerfile: airflow/Dockerfile
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    depends_on:
      - redis
      - db

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    platform: linux/amd64
    hostname: airflow-triggerer
    build:
      context: .
      dockerfile: airflow/Dockerfile
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      - redis
      - db

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    platform: linux/amd64
    hostname: airflow-cli
    build:
      context: .
      dockerfile: airflow/Dockerfile
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
    command: ["bash", "-c", "airflow"]
    tty: true
    stdin_open: true

  airflow-flower:
    <<: *airflow-common
    container_name: airflow-flower
    platform: linux/amd64
    hostname: airflow-flower
    build:
      context: .
      dockerfile: airflow/Dockerfile
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

############################
## DATABASE
############################
  redis:
    image: redis:latest
    platform: linux/amd64
    container_name: redis
    hostname: redis
    expose:
      - 6379
    ports:
      - 6379:6379
    volumes:
      - ./util:/util    

  db:
    image: postgres
    platform: linux/amd64
    container_name: db
    hostname: db
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: admin
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200 -c wal_level=logical
    ports:
      - 15432:5432
    volumes:
      - ./postgres/volume:/var/lib/postgresql/data
      - ./util:/util

  hive:
    hostname: hive
    image: fjardim/mds-hive
    platform: linux/amd64
    container_name: hive
    environment:
      AWS_ACCESS_KEY_ID: datalake
      AWS_SECRET_ACCESS_KEY: datalake
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      SERVICE_NAME: hiveserver2
      SERVICE_OPTS: "-Dhive.metastore.uris=thrift://metastore:9083" 
      IS_RESUME: "true"
    ports:
       - "10000:10000"
       - "10002:10002"
    depends_on:
      - metastore
    user: root
    volumes:
       - ./hive/conf:/hive_custom_conf
       - ./util:/util
    command: >
      sh -c "pkill -f hiveserver2 || true && 
            start-hive"

  metastore:
    hostname: metastore
    platform: linux/amd64
    image: fjardim/mds-hive-metastore
    container_name: metastore
    environment:
      AWS_ACCESS_KEY_ID: datalake
      AWS_SECRET_ACCESS_KEY: datalake
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      SERVICE_NAME: metastore
      IS_RESUME: "true"
      DB_DRIVER: postgres
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://db:5432/admin -Djavax.jdo.option.ConnectionUserName=admin -Djavax.jdo.option.ConnectionPassword=admin" 
    ports:
       - "9083:9083"
    depends_on:
        - db
    user: root
    volumes:
       - ./hive/meta:/opt/hive/data/warehouse 
       - ./hive/conf:/hive_custom_conf
       - ./util:/util

############################
## VISUALIZACAO
############################
  # metabase:
  #   image: metabase/metabase:latest
  #   platform: linux/amd64
  #   container_name: metabase
  #   hostname: metabase
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - db
  #   environment:
  #     MB_DB_TYPE: postgres
  #     MB_DB_DBNAME: metabase
  #     MB_DB_PORT: 5432
  #     MB_DB_PASS: admin
  #     MB_DB_USER: admin
  #     MB_DB_HOST: db
  #     MB_PASSWORD_COMPLEXITY: "weak"
  #     MB_PASSWORD_LENGTH: 4
  #   volumes:
  #     - ./util:/util

#############################
## GENERAL
#############################
networks:
  datalab:
    driver: bridge
